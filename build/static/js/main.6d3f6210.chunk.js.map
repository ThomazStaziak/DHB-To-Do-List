{"version":3,"sources":["components/Task/Task.js","components/Button/Button.js","components/Input/Input.js","components/ToDo/ToDo.js","components/AppBar/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["Task","react_default","a","createElement","className","this","props","title","date","statusClassName","onClick","statusClick","status","Component","Button","type","Input","placeholder","React","ToDo","state","tasks","componentDidMount","_this","listTasks","localTasks","localStorage","getItem","setItem","JSON","stringify","setState","parse","checkDate","currentDate","Date","day","String","getDay","month","getMonth","year","getFullYear","formattedDate","concat","padStart","addTask","evt","preventDefault","typedDate","target","firstElementChild","nextElementSibling","value","split","reverse","join","alert","typedTask","jsonLocal","push","content","focus","removeTasks","updateTask","index","_this2","onSubmit","components_Input_Input","components_Button_Button","map","task","components_Task_Task","key","HideOnScroll","children","window","trigger","useScrollTrigger","undefined","Slide","appear","direction","in","useStyles","makeStyles","avatar","margin","bigAvatar","width","height","HideAppBar","classes","Fragment","CssBaseline","AppBar","Toolbar","MenuRounded","Typography","style","variant","Avatar","alt","src","App","ToDo_ToDo_ToDo","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAqBeA,0LAfX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAKC,MAAMF,WACzBH,EAAAC,EAAAC,cAAA,YAAOE,KAAKC,MAAMC,OAClBN,EAAAC,EAAAC,cAAA,YAAOE,KAAKC,MAAME,MAClBP,EAAAC,EAAAC,cAAA,QACEC,UAAWC,KAAKC,MAAMG,gBACtBC,QAASL,KAAKC,MAAMK,aAEnBN,KAAKC,MAAMM,gBAVHC,cCcJC,0LAZX,OACEb,EAAAC,EAAAC,cAAA,UACEY,KAAMV,KAAKC,MAAMS,KACjBX,UAAWC,KAAKC,MAAMF,UACtBM,QAASL,KAAKC,MAAMI,SAEnBL,KAAKC,MAAMC,cARCM,cCQNG,0LANX,OACEf,EAAAC,EAAAC,cAAA,SAAOY,KAAMV,KAAKC,MAAMS,KAAME,YAAaZ,KAAKC,MAAMW,qBAHxCC,IAAML,YCILM,oNACnBC,MAAQ,CACNC,MAAO,MAGTC,kBAAoB,WAClBC,EAAKC,eAGPA,UAAY,WACV,IAAIC,EAAaC,aAAaC,QAAQ,SAEnB,OAAfF,EAAqBC,aAAaE,QAAQ,QAASC,KAAKC,UAAU,KACjEP,EAAKQ,SAAS,CAAEV,MAAOQ,KAAKG,MAAMP,QAGzCQ,UAAY,SAAAzB,GACV,IAAI0B,EAAc,IAAIC,KAClBC,EAAMC,OAAOH,EAAYI,UACzBC,EAAQF,OAAOH,EAAYM,WAAa,GACxCC,EAAOJ,OAAOH,EAAYQ,eAC1BC,EAAa,WAAAC,OACbH,EADa,KAAAG,OACLL,EAAMM,SAAS,EAAG,GADb,KAAAD,OACmBR,EAAIS,SAAS,EAAG,KADnC,UAIjB,OAAOV,KAAKH,MAAMxB,GAAQ2B,KAAKH,MAAMW,MAGvCG,QAAU,SAAAC,GACRA,EAAIC,iBAEJ,IAAIC,EAAYF,EAAIG,OAAOC,kBAAkBC,mBAAmBC,MAE5DV,EADeM,EAAUK,MAAM,KACFC,UAAUC,KAAK,KAEhD,IAAKjC,EAAKU,UAAUgB,GAClB,OAAOQ,MAAM,6DAEf,IAAIC,EAAYX,EAAIG,OAAOC,kBAAkBE,MAE7C,GAAkB,KAAdK,EACF,OAAOD,MAAM,gEAEf,IAAIE,EAAYjC,aAAaC,QAAQ,SAEjCN,EAAQQ,KAAKG,MAAM2B,GAEvBtC,EAAMuC,KAAK,CACTC,QAASH,EACT9C,OAAQ,UACRJ,KAAMmC,IAERI,EAAIG,OAAOC,kBAAkBE,MAAQ,GACrCN,EAAIG,OAAOC,kBAAkBW,QAC7BpC,aAAaE,QAAQ,QAASC,KAAKC,UAAUT,IAE7CE,EAAKQ,SAAS,CAAEV,aAGlB0C,YAAc,WACZrC,aAAaE,QAAQ,QAASC,KAAKC,UAAU,KAC7CP,EAAKQ,SAAS,CAAEV,MAAO,QAGzB2C,WAAa,SAAAC,GACX,IAAIN,EAAYjC,aAAaC,QAAQ,SAEjCN,EAAQQ,KAAKG,MAAM2B,GAEK,YAAxBtC,EAAM4C,GAAOrD,OAAsBS,EAAM4C,GAAOrD,OAAS,QACxDS,EAAM4C,GAAOrD,OAAS,UAE3Bc,aAAaE,QAAQ,QAASC,KAAKC,UAAUT,IAC7CE,EAAKQ,SAAS,CAAEV,mFAGT,IAAA6C,EAAA7D,KACP,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMgE,SAAU9D,KAAKyC,SACnB7C,EAAAC,EAAAC,cAACiE,EAAD,CAAOrD,KAAK,OAAOE,YAAY,oBAC/BhB,EAAAC,EAAAC,cAACiE,EAAD,CAAOrD,KAAK,SACZd,EAAAC,EAAAC,cAACkE,EAAD,CAAQtD,KAAK,SAASX,UAAU,MAAMG,MAAM,sBAE9CN,EAAAC,EAAAC,cAACkE,EAAD,CACEtD,KAAK,SACLX,UAAU,YACVG,MAAM,2BACNG,QAASL,KAAK0D,cAEf1D,KAAKe,MAAMC,MAAMiD,IAAI,SAACC,EAAMN,GAC3B,OACEhE,EAAAC,EAAAC,cAACqE,EAAD,CACEC,IAAKR,EACL7D,UAAU,SACVG,MAAOgE,EAAKV,QACZjD,OAAQ2D,EAAK3D,OACbJ,KAAM+D,EAAK/D,KACXG,YAAa,WACXuD,EAAKF,WAAWC,IAElBxD,gBAAiB8D,EAAK3D,mBArGFC,sFCIlC,SAAS6D,EAAapE,GAAO,IACnBqE,EAAqBrE,EAArBqE,SAAUC,EAAWtE,EAAXsE,OAIZC,EAAUC,YAAiB,CAAE5B,OAAQ0B,EAASA,SAAWG,IAE/D,OACE9E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOC,QAAQ,EAAOC,UAAU,OAAOC,IAAKN,GACzCF,GAcP,IAAMS,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,OAAQ,IAEVC,UAAW,CACTD,OAAQ,GACRE,MAAO,GACPC,OAAQ,MAIG,SAASC,EAAWrF,GACjC,IAAMsF,EAAUR,IAChB,OACEnF,EAAAC,EAAAC,cAACF,EAAAC,EAAM2F,SAAP,KACE5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,MACA7F,EAAAC,EAAAC,cAACuE,EAAiBpE,EAChBL,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,KACE9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,KACE/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,MACAhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,CAAYC,MAAO,CAAEZ,OAAQ,UAAYa,QAAQ,MAAjD,8BAGAnG,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACEC,IAAI,iBACJC,IAAI,2CACJnG,UAAWwF,EAAQN,YAK3BrF,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,OClDSQ,MATf,WACE,OACEvG,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2F,SAAA,KACE5F,EAAAC,EAAAC,cAACwF,EAAD,MACA1F,EAAAC,EAAAC,cAACsG,EAAD,QCCcC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d3f6210.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Task.css\";\n\nclass Task extends Component {\n  render() {\n    return (\n      <div className={this.props.className}>\n        <span>{this.props.title}</span>\n        <span>{this.props.date}</span>\n        <span\n          className={this.props.statusClassName}\n          onClick={this.props.statusClick}\n        >\n          {this.props.status}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from \"react\";\n\nimport \"./Button.css\";\n\nclass Button extends Component {\n  render() {\n    return (\n      <button\n        type={this.props.type}\n        className={this.props.className}\n        onClick={this.props.onClick}\n      >\n        {this.props.title}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\n\nimport \"./Input.css\";\n\nclass Input extends React.Component {\n  render() {\n    return (\n      <input type={this.props.type} placeholder={this.props.placeholder} />\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nimport Task from \"../Task/Task\";\nimport Button from \"../Button/Button\";\nimport Input from \"../Input/Input\";\n\nimport \"./ToDo.css\";\n\nexport default class ToDo extends Component {\n  state = {\n    tasks: []\n  };\n\n  componentDidMount = () => {\n    this.listTasks();\n  };\n\n  listTasks = () => {\n    let localTasks = localStorage.getItem(\"tasks\");\n\n    if (localTasks === null) localStorage.setItem(\"tasks\", JSON.stringify([]));\n    else this.setState({ tasks: JSON.parse(localTasks) });\n  };\n\n  checkDate = date => {\n    let currentDate = new Date();\n    let day = String(currentDate.getDay());\n    let month = String(currentDate.getMonth() + 1);\n    let year = String(currentDate.getFullYear());\n    let formattedDate = `\n      ${year}-${month.padStart(2, 0)}-${day.padStart(2, \"0\")}\n    `;\n\n    return Date.parse(date) > Date.parse(formattedDate);\n  };\n\n  addTask = evt => {\n    evt.preventDefault();\n\n    let typedDate = evt.target.firstElementChild.nextElementSibling.value;\n    let splittedDate = typedDate.split(\"-\");\n    let formattedDate = splittedDate.reverse().join(\"/\");\n\n    if (!this.checkDate(typedDate))\n      return alert(\"Adicione uma data que seja superior ou igual a data atual\");\n\n    let typedTask = evt.target.firstElementChild.value;\n\n    if (typedTask === \"\")\n      return alert(\"Não é possível adicionar uma tarefa sem conteúdo\");\n\n    let jsonLocal = localStorage.getItem(\"tasks\");\n\n    let tasks = JSON.parse(jsonLocal);\n\n    tasks.push({\n      content: typedTask,\n      status: \"Fazendo\",\n      date: formattedDate\n    });\n    evt.target.firstElementChild.value = \"\";\n    evt.target.firstElementChild.focus();\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\n    this.setState({ tasks });\n  };\n\n  removeTasks = () => {\n    localStorage.setItem(\"tasks\", JSON.stringify([]));\n    this.setState({ tasks: [] });\n  };\n\n  updateTask = index => {\n    let jsonLocal = localStorage.getItem(\"tasks\");\n\n    let tasks = JSON.parse(jsonLocal);\n\n    if (tasks[index].status === \"Fazendo\") tasks[index].status = \"Feito\";\n    else tasks[index].status = \"Fazendo\";\n\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    this.setState({ tasks });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.addTask}>\n          <Input type=\"text\" placeholder=\"Digite a tarefa\" />\n          <Input type=\"date\" />\n          <Button type=\"submit\" className=\"add\" title=\"Adicionar Tarefa\" />\n        </form>\n        <Button\n          type=\"button\"\n          className=\"removeAll\"\n          title=\"Remover todas as tarefas\"\n          onClick={this.removeTasks}\n        />\n        {this.state.tasks.map((task, index) => {\n          return (\n            <Task\n              key={index}\n              className=\"tarefa\"\n              title={task.content}\n              status={task.status}\n              date={task.date}\n              statusClick={() => {\n                this.updateTask(index);\n              }}\n              statusClassName={task.status}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { MenuRounded } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func\n};\n\nconst useStyles = makeStyles({\n  avatar: {\n    margin: 10\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 60,\n    height: 60\n  }\n});\n\nexport default function HideAppBar(props) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar>\n          <Toolbar>\n            <MenuRounded />\n            <Typography style={{ margin: \"0 auto\" }} variant=\"h6\">\n              To Do List - Digital House\n            </Typography>\n            <Avatar\n              alt=\"Avatar picture\"\n              src=\"https://thispersondoesnotexist.com/image\"\n              className={classes.avatar}\n            />\n          </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\n\nimport \"./styles/global.css\";\n\nimport ToDo from \"./components/ToDo/ToDo\";\nimport AppBar from \"./components/AppBar/AppBar\";\n\nfunction App() {\n  return (\n    <>\n      <AppBar />\n      <ToDo />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}